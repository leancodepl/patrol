//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

package pl.leancode.automatorserver.contracts;

@kotlin.jvm.JvmName("-initializeenterTextRequest")
inline fun enterTextRequest(block: pl.leancode.automatorserver.contracts.EnterTextRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest =
  pl.leancode.automatorserver.contracts.EnterTextRequestKt.Dsl._create(pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest.newBuilder()).apply { block() }._build()
object EnterTextRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest = _builder.build()

    /**
     * <code>string data = 1;</code>
     */
    var data: kotlin.String
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <code>string data = 1;</code>
     */
    fun clearData() {
      _builder.clearData()
    }

    /**
     * <code>string appId = 2;</code>
     */
    var appId: kotlin.String
      @JvmName("getAppId")
      get() = _builder.getAppId()
      @JvmName("setAppId")
      set(value) {
        _builder.setAppId(value)
      }
    /**
     * <code>string appId = 2;</code>
     */
    fun clearAppId() {
      _builder.clearAppId()
    }

    /**
     * <code>uint32 index = 3;</code>
     */
    var index: kotlin.Int
      @JvmName("getIndex")
      get() = _builder.getIndex()
      @JvmName("setIndex")
      set(value) {
        _builder.setIndex(value)
      }
    /**
     * <code>uint32 index = 3;</code>
     */
    fun clearIndex() {
      _builder.clearIndex()
    }
    /**
     * <code>uint32 index = 3;</code>
     * @return Whether the index field is set.
     */
    fun hasIndex(): kotlin.Boolean {
      return _builder.hasIndex()
    }

    /**
     * <code>.patrol.Selector selector = 4;</code>
     */
    var selector: pl.leancode.automatorserver.contracts.Contracts.Selector
      @JvmName("getSelector")
      get() = _builder.getSelector()
      @JvmName("setSelector")
      set(value) {
        _builder.setSelector(value)
      }
    /**
     * <code>.patrol.Selector selector = 4;</code>
     */
    fun clearSelector() {
      _builder.clearSelector()
    }
    /**
     * <code>.patrol.Selector selector = 4;</code>
     * @return Whether the selector field is set.
     */
    fun hasSelector(): kotlin.Boolean {
      return _builder.hasSelector()
    }
    val findByCase: pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest.FindByCase
      @JvmName("getFindByCase")
      get() = _builder.getFindByCase()

    fun clearFindBy() {
      _builder.clearFindBy()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest.copy(block: pl.leancode.automatorserver.contracts.EnterTextRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.EnterTextRequest =
  pl.leancode.automatorserver.contracts.EnterTextRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val pl.leancode.automatorserver.contracts.Contracts.EnterTextRequestOrBuilder.selectorOrNull: pl.leancode.automatorserver.contracts.Contracts.Selector?
  get() = if (hasSelector()) getSelector() else null

