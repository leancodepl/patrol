//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

package pl.leancode.automatorserver.contracts;

@kotlin.jvm.JvmName("-initializegetNotificationsResponse")
inline fun getNotificationsResponse(block: pl.leancode.automatorserver.contracts.GetNotificationsResponseKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse =
  pl.leancode.automatorserver.contracts.GetNotificationsResponseKt.Dsl._create(pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse.newBuilder()).apply { block() }._build()
object GetNotificationsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse = _builder.build()

    /**
     * <code>string errorMessage = 1;</code>
     */
    var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.getErrorMessage()
      @JvmName("setErrorMessage")
      set(value) {
        _builder.setErrorMessage(value)
      }
    /**
     * <code>string errorMessage = 1;</code>
     */
    fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }
    /**
     * <code>string errorMessage = 1;</code>
     * @return Whether the errorMessage field is set.
     */
    fun hasErrorMessage(): kotlin.Boolean {
      return _builder.hasErrorMessage()
    }

    /**
     * <code>.patrol.Notifications notifications = 2;</code>
     */
    var notifications: pl.leancode.automatorserver.contracts.Contracts.Notifications
      @JvmName("getNotifications")
      get() = _builder.getNotifications()
      @JvmName("setNotifications")
      set(value) {
        _builder.setNotifications(value)
      }
    /**
     * <code>.patrol.Notifications notifications = 2;</code>
     */
    fun clearNotifications() {
      _builder.clearNotifications()
    }
    /**
     * <code>.patrol.Notifications notifications = 2;</code>
     * @return Whether the notifications field is set.
     */
    fun hasNotifications(): kotlin.Boolean {
      return _builder.hasNotifications()
    }
    val valueCase: pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse.ValueCase
      @JvmName("getValueCase")
      get() = _builder.getValueCase()

    fun clearValue() {
      _builder.clearValue()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse.copy(block: pl.leancode.automatorserver.contracts.GetNotificationsResponseKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponse =
  pl.leancode.automatorserver.contracts.GetNotificationsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val pl.leancode.automatorserver.contracts.Contracts.GetNotificationsResponseOrBuilder.notificationsOrNull: pl.leancode.automatorserver.contracts.Contracts.Notifications?
  get() = if (hasNotifications()) getNotifications() else null

