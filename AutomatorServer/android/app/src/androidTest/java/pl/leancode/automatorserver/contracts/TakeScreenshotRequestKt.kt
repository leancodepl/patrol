//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

package pl.leancode.automatorserver.contracts;

@kotlin.jvm.JvmName("-initializetakeScreenshotRequest")
inline fun takeScreenshotRequest(block: pl.leancode.automatorserver.contracts.TakeScreenshotRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest =
  pl.leancode.automatorserver.contracts.TakeScreenshotRequestKt.Dsl._create(pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest.newBuilder()).apply { block() }._build()
object TakeScreenshotRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest = _builder.build()

    /**
     * <code>string appId = 1;</code>
     */
    var appId: kotlin.String
      @JvmName("getAppId")
      get() = _builder.getAppId()
      @JvmName("setAppId")
      set(value) {
        _builder.setAppId(value)
      }
    /**
     * <code>string appId = 1;</code>
     */
    fun clearAppId() {
      _builder.clearAppId()
    }

    /**
     * <code>string filename = 2;</code>
     */
    var filename: kotlin.String
      @JvmName("getFilename")
      get() = _builder.getFilename()
      @JvmName("setFilename")
      set(value) {
        _builder.setFilename(value)
      }
    /**
     * <code>string filename = 2;</code>
     */
    fun clearFilename() {
      _builder.clearFilename()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest.copy(block: pl.leancode.automatorserver.contracts.TakeScreenshotRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.automatorserver.contracts.Contracts.TakeScreenshotRequest =
  pl.leancode.automatorserver.contracts.TakeScreenshotRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

