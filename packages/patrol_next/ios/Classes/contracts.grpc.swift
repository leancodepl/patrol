//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: contracts.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Patrol_NativeAutomatorClient`, then call methods of this protocol to make API calls.
internal protocol Patrol_NativeAutomatorClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? { get }

  func configure(
    _ request: Patrol_ConfigureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_ConfigureRequest, Patrol_Empty>

  func pressHome(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func pressBack(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func pressRecentApps(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func doublePressRecentApps(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func openApp(
    _ request: Patrol_OpenAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_OpenAppRequest, Patrol_Empty>

  func openQuickSettings(
    _ request: Patrol_OpenQuickSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_OpenQuickSettingsRequest, Patrol_Empty>

  func getNativeViews(
    _ request: Patrol_GetNativeViewsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse>

  func tap(
    _ request: Patrol_TapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_TapRequest, Patrol_Empty>

  func doubleTap(
    _ request: Patrol_TapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_TapRequest, Patrol_Empty>

  func enterText(
    _ request: Patrol_EnterTextRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_EnterTextRequest, Patrol_Empty>

  func swipe(
    _ request: Patrol_SwipeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_SwipeRequest, Patrol_Empty>

  func enableAirplaneMode(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func disableAirplaneMode(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func enableWiFi(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func disableWiFi(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func enableCellular(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func disableCellular(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func enableBluetooth(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func disableBluetooth(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func enableDarkMode(
    _ request: Patrol_DarkModeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_DarkModeRequest, Patrol_Empty>

  func disableDarkMode(
    _ request: Patrol_DarkModeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_DarkModeRequest, Patrol_Empty>

  func openNotifications(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func closeNotifications(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func closeHeadsUpNotification(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>

  func getNotifications(
    _ request: Patrol_GetNotificationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse>

  func tapOnNotification(
    _ request: Patrol_TapOnNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_TapOnNotificationRequest, Patrol_Empty>

  func isPermissionDialogVisible(
    _ request: Patrol_PermissionDialogVisibleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse>

  func handlePermissionDialog(
    _ request: Patrol_HandlePermissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_HandlePermissionRequest, Patrol_Empty>

  func setLocationAccuracy(
    _ request: Patrol_SetLocationAccuracyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_SetLocationAccuracyRequest, Patrol_Empty>

  func debug(
    _ request: Patrol_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty>
}

extension Patrol_NativeAutomatorClientProtocol {
  internal var serviceName: String {
    return "patrol.NativeAutomator"
  }

  /// Unary call to configure
  ///
  /// - Parameters:
  ///   - request: Request to send to configure.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func configure(
    _ request: Patrol_ConfigureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_ConfigureRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.configure.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconfigureInterceptors() ?? []
    )
  }

  /// general
  ///
  /// - Parameters:
  ///   - request: Request to send to pressHome.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pressHome(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.pressHome.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepressHomeInterceptors() ?? []
    )
  }

  /// Unary call to pressBack
  ///
  /// - Parameters:
  ///   - request: Request to send to pressBack.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pressBack(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.pressBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepressBackInterceptors() ?? []
    )
  }

  /// Unary call to pressRecentApps
  ///
  /// - Parameters:
  ///   - request: Request to send to pressRecentApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pressRecentApps(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.pressRecentApps.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepressRecentAppsInterceptors() ?? []
    )
  }

  /// Unary call to doublePressRecentApps
  ///
  /// - Parameters:
  ///   - request: Request to send to doublePressRecentApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func doublePressRecentApps(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.doublePressRecentApps.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedoublePressRecentAppsInterceptors() ?? []
    )
  }

  /// Unary call to openApp
  ///
  /// - Parameters:
  ///   - request: Request to send to openApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openApp(
    _ request: Patrol_OpenAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_OpenAppRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.openApp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeopenAppInterceptors() ?? []
    )
  }

  /// Unary call to openQuickSettings
  ///
  /// - Parameters:
  ///   - request: Request to send to openQuickSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openQuickSettings(
    _ request: Patrol_OpenQuickSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_OpenQuickSettingsRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.openQuickSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeopenQuickSettingsInterceptors() ?? []
    )
  }

  /// general UI interaction
  ///
  /// - Parameters:
  ///   - request: Request to send to getNativeViews.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNativeViews(
    _ request: Patrol_GetNativeViewsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.getNativeViews.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetNativeViewsInterceptors() ?? []
    )
  }

  /// Unary call to tap
  ///
  /// - Parameters:
  ///   - request: Request to send to tap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tap(
    _ request: Patrol_TapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_TapRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.tap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketapInterceptors() ?? []
    )
  }

  /// Unary call to doubleTap
  ///
  /// - Parameters:
  ///   - request: Request to send to doubleTap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func doubleTap(
    _ request: Patrol_TapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_TapRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.doubleTap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedoubleTapInterceptors() ?? []
    )
  }

  /// Unary call to enterText
  ///
  /// - Parameters:
  ///   - request: Request to send to enterText.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enterText(
    _ request: Patrol_EnterTextRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_EnterTextRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enterText.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenterTextInterceptors() ?? []
    )
  }

  /// Unary call to swipe
  ///
  /// - Parameters:
  ///   - request: Request to send to swipe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func swipe(
    _ request: Patrol_SwipeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_SwipeRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.swipe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeswipeInterceptors() ?? []
    )
  }

  /// services
  ///
  /// - Parameters:
  ///   - request: Request to send to enableAirplaneMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableAirplaneMode(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enableAirplaneMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenableAirplaneModeInterceptors() ?? []
    )
  }

  /// Unary call to disableAirplaneMode
  ///
  /// - Parameters:
  ///   - request: Request to send to disableAirplaneMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableAirplaneMode(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.disableAirplaneMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedisableAirplaneModeInterceptors() ?? []
    )
  }

  /// Unary call to enableWiFi
  ///
  /// - Parameters:
  ///   - request: Request to send to enableWiFi.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableWiFi(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enableWiFi.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenableWiFiInterceptors() ?? []
    )
  }

  /// Unary call to disableWiFi
  ///
  /// - Parameters:
  ///   - request: Request to send to disableWiFi.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableWiFi(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.disableWiFi.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedisableWiFiInterceptors() ?? []
    )
  }

  /// Unary call to enableCellular
  ///
  /// - Parameters:
  ///   - request: Request to send to enableCellular.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableCellular(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enableCellular.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenableCellularInterceptors() ?? []
    )
  }

  /// Unary call to disableCellular
  ///
  /// - Parameters:
  ///   - request: Request to send to disableCellular.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableCellular(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.disableCellular.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedisableCellularInterceptors() ?? []
    )
  }

  /// Unary call to enableBluetooth
  ///
  /// - Parameters:
  ///   - request: Request to send to enableBluetooth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableBluetooth(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enableBluetooth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenableBluetoothInterceptors() ?? []
    )
  }

  /// Unary call to disableBluetooth
  ///
  /// - Parameters:
  ///   - request: Request to send to disableBluetooth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableBluetooth(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.disableBluetooth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedisableBluetoothInterceptors() ?? []
    )
  }

  /// Unary call to enableDarkMode
  ///
  /// - Parameters:
  ///   - request: Request to send to enableDarkMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableDarkMode(
    _ request: Patrol_DarkModeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_DarkModeRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.enableDarkMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeenableDarkModeInterceptors() ?? []
    )
  }

  /// Unary call to disableDarkMode
  ///
  /// - Parameters:
  ///   - request: Request to send to disableDarkMode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableDarkMode(
    _ request: Patrol_DarkModeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_DarkModeRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.disableDarkMode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedisableDarkModeInterceptors() ?? []
    )
  }

  /// notifications
  ///
  /// - Parameters:
  ///   - request: Request to send to openNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openNotifications(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.openNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeopenNotificationsInterceptors() ?? []
    )
  }

  /// Unary call to closeNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to closeNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeNotifications(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.closeNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecloseNotificationsInterceptors() ?? []
    )
  }

  /// Unary call to closeHeadsUpNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to closeHeadsUpNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeHeadsUpNotification(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.closeHeadsUpNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecloseHeadsUpNotificationInterceptors() ?? []
    )
  }

  /// Unary call to getNotifications
  ///
  /// - Parameters:
  ///   - request: Request to send to getNotifications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNotifications(
    _ request: Patrol_GetNotificationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.getNotifications.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetNotificationsInterceptors() ?? []
    )
  }

  /// Unary call to tapOnNotification
  ///
  /// - Parameters:
  ///   - request: Request to send to tapOnNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tapOnNotification(
    _ request: Patrol_TapOnNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_TapOnNotificationRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.tapOnNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketapOnNotificationInterceptors() ?? []
    )
  }

  /// permissions
  ///
  /// - Parameters:
  ///   - request: Request to send to isPermissionDialogVisible.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isPermissionDialogVisible(
    _ request: Patrol_PermissionDialogVisibleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.isPermissionDialogVisible.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeisPermissionDialogVisibleInterceptors() ?? []
    )
  }

  /// Unary call to handlePermissionDialog
  ///
  /// - Parameters:
  ///   - request: Request to send to handlePermissionDialog.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func handlePermissionDialog(
    _ request: Patrol_HandlePermissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_HandlePermissionRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.handlePermissionDialog.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makehandlePermissionDialogInterceptors() ?? []
    )
  }

  /// Unary call to setLocationAccuracy
  ///
  /// - Parameters:
  ///   - request: Request to send to setLocationAccuracy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setLocationAccuracy(
    _ request: Patrol_SetLocationAccuracyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_SetLocationAccuracyRequest, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.setLocationAccuracy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesetLocationAccuracyInterceptors() ?? []
    )
  }

  /// Unary call to debug
  ///
  /// - Parameters:
  ///   - request: Request to send to debug.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func debug(
    _ request: Patrol_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Patrol_Empty, Patrol_Empty> {
    return self.makeUnaryCall(
      path: Patrol_NativeAutomatorClientMetadata.Methods.debug.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedebugInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
  @available(*, deprecated)
  extension Patrol_NativeAutomatorClient: @unchecked Sendable {}
#endif  // compiler(>=5.6)

@available(*, deprecated, renamed: "Patrol_NativeAutomatorNIOClient")
internal final class Patrol_NativeAutomatorClient: Patrol_NativeAutomatorClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the patrol.NativeAutomator service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Patrol_NativeAutomatorNIOClient: Patrol_NativeAutomatorClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol?

  /// Creates a client for the patrol.NativeAutomator service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  internal protocol Patrol_NativeAutomatorAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? { get }

    func makeConfigureCall(
      _ request: Patrol_ConfigureRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_ConfigureRequest, Patrol_Empty>

    func makePressHomeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makePressBackCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makePressRecentAppsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeDoublePressRecentAppsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeOpenAppCall(
      _ request: Patrol_OpenAppRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_OpenAppRequest, Patrol_Empty>

    func makeOpenQuickSettingsCall(
      _ request: Patrol_OpenQuickSettingsRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_OpenQuickSettingsRequest, Patrol_Empty>

    func makeGetNativeViewsCall(
      _ request: Patrol_GetNativeViewsRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse>

    func makeTapCall(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_TapRequest, Patrol_Empty>

    func makeDoubleTapCall(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_TapRequest, Patrol_Empty>

    func makeEnterTextCall(
      _ request: Patrol_EnterTextRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_EnterTextRequest, Patrol_Empty>

    func makeSwipeCall(
      _ request: Patrol_SwipeRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_SwipeRequest, Patrol_Empty>

    func makeEnableAirplaneModeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeDisableAirplaneModeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeEnableWiFiCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeDisableWiFiCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeEnableCellularCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeDisableCellularCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeEnableBluetoothCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeDisableBluetoothCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeEnableDarkModeCall(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_DarkModeRequest, Patrol_Empty>

    func makeDisableDarkModeCall(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_DarkModeRequest, Patrol_Empty>

    func makeOpenNotificationsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeCloseNotificationsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeCloseHeadsUpNotificationCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>

    func makeGetNotificationsCall(
      _ request: Patrol_GetNotificationsRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse>

    func makeTapOnNotificationCall(
      _ request: Patrol_TapOnNotificationRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_TapOnNotificationRequest, Patrol_Empty>

    func makeIsPermissionDialogVisibleCall(
      _ request: Patrol_PermissionDialogVisibleRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<
      Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse
    >

    func makeHandlePermissionDialogCall(
      _ request: Patrol_HandlePermissionRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_HandlePermissionRequest, Patrol_Empty>

    func makeSetLocationAccuracyCall(
      _ request: Patrol_SetLocationAccuracyRequest,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_SetLocationAccuracyRequest, Patrol_Empty>

    func makeDebugCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty>
  }

  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  extension Patrol_NativeAutomatorAsyncClientProtocol {
    internal static var serviceDescriptor: GRPCServiceDescriptor {
      return Patrol_NativeAutomatorClientMetadata.serviceDescriptor
    }

    internal var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? {
      return nil
    }

    internal func makeConfigureCall(
      _ request: Patrol_ConfigureRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_ConfigureRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.configure.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeconfigureInterceptors() ?? []
      )
    }

    internal func makePressHomeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressHome.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressHomeInterceptors() ?? []
      )
    }

    internal func makePressBackCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressBack.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressBackInterceptors() ?? []
      )
    }

    internal func makePressRecentAppsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressRecentApps.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressRecentAppsInterceptors() ?? []
      )
    }

    internal func makeDoublePressRecentAppsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.doublePressRecentApps.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedoublePressRecentAppsInterceptors() ?? []
      )
    }

    internal func makeOpenAppCall(
      _ request: Patrol_OpenAppRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_OpenAppRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openApp.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenAppInterceptors() ?? []
      )
    }

    internal func makeOpenQuickSettingsCall(
      _ request: Patrol_OpenQuickSettingsRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_OpenQuickSettingsRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openQuickSettings.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenQuickSettingsInterceptors() ?? []
      )
    }

    internal func makeGetNativeViewsCall(
      _ request: Patrol_GetNativeViewsRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.getNativeViews.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makegetNativeViewsInterceptors() ?? []
      )
    }

    internal func makeTapCall(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_TapRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.tap.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.maketapInterceptors() ?? []
      )
    }

    internal func makeDoubleTapCall(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_TapRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.doubleTap.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedoubleTapInterceptors() ?? []
      )
    }

    internal func makeEnterTextCall(
      _ request: Patrol_EnterTextRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_EnterTextRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enterText.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenterTextInterceptors() ?? []
      )
    }

    internal func makeSwipeCall(
      _ request: Patrol_SwipeRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_SwipeRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.swipe.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeswipeInterceptors() ?? []
      )
    }

    internal func makeEnableAirplaneModeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableAirplaneMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableAirplaneModeInterceptors() ?? []
      )
    }

    internal func makeDisableAirplaneModeCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableAirplaneMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableAirplaneModeInterceptors() ?? []
      )
    }

    internal func makeEnableWiFiCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableWiFi.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableWiFiInterceptors() ?? []
      )
    }

    internal func makeDisableWiFiCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableWiFi.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableWiFiInterceptors() ?? []
      )
    }

    internal func makeEnableCellularCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableCellular.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableCellularInterceptors() ?? []
      )
    }

    internal func makeDisableCellularCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableCellular.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableCellularInterceptors() ?? []
      )
    }

    internal func makeEnableBluetoothCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableBluetooth.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableBluetoothInterceptors() ?? []
      )
    }

    internal func makeDisableBluetoothCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableBluetooth.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableBluetoothInterceptors() ?? []
      )
    }

    internal func makeEnableDarkModeCall(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_DarkModeRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableDarkMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableDarkModeInterceptors() ?? []
      )
    }

    internal func makeDisableDarkModeCall(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_DarkModeRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableDarkMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableDarkModeInterceptors() ?? []
      )
    }

    internal func makeOpenNotificationsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenNotificationsInterceptors() ?? []
      )
    }

    internal func makeCloseNotificationsCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.closeNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makecloseNotificationsInterceptors() ?? []
      )
    }

    internal func makeCloseHeadsUpNotificationCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.closeHeadsUpNotification.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makecloseHeadsUpNotificationInterceptors() ?? []
      )
    }

    internal func makeGetNotificationsCall(
      _ request: Patrol_GetNotificationsRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.getNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makegetNotificationsInterceptors() ?? []
      )
    }

    internal func makeTapOnNotificationCall(
      _ request: Patrol_TapOnNotificationRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_TapOnNotificationRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.tapOnNotification.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.maketapOnNotificationInterceptors() ?? []
      )
    }

    internal func makeIsPermissionDialogVisibleCall(
      _ request: Patrol_PermissionDialogVisibleRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<
      Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse
    > {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.isPermissionDialogVisible.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeisPermissionDialogVisibleInterceptors() ?? []
      )
    }

    internal func makeHandlePermissionDialogCall(
      _ request: Patrol_HandlePermissionRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_HandlePermissionRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.handlePermissionDialog.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makehandlePermissionDialogInterceptors() ?? []
      )
    }

    internal func makeSetLocationAccuracyCall(
      _ request: Patrol_SetLocationAccuracyRequest,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_SetLocationAccuracyRequest, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.setLocationAccuracy.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makesetLocationAccuracyInterceptors() ?? []
      )
    }

    internal func makeDebugCall(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Patrol_Empty, Patrol_Empty> {
      return self.makeAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.debug.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedebugInterceptors() ?? []
      )
    }
  }

  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  extension Patrol_NativeAutomatorAsyncClientProtocol {
    internal func configure(
      _ request: Patrol_ConfigureRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.configure.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeconfigureInterceptors() ?? []
      )
    }

    internal func pressHome(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressHome.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressHomeInterceptors() ?? []
      )
    }

    internal func pressBack(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressBack.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressBackInterceptors() ?? []
      )
    }

    internal func pressRecentApps(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.pressRecentApps.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makepressRecentAppsInterceptors() ?? []
      )
    }

    internal func doublePressRecentApps(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.doublePressRecentApps.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedoublePressRecentAppsInterceptors() ?? []
      )
    }

    internal func openApp(
      _ request: Patrol_OpenAppRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openApp.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenAppInterceptors() ?? []
      )
    }

    internal func openQuickSettings(
      _ request: Patrol_OpenQuickSettingsRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openQuickSettings.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenQuickSettingsInterceptors() ?? []
      )
    }

    internal func getNativeViews(
      _ request: Patrol_GetNativeViewsRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_GetNativeViewsResponse {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.getNativeViews.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makegetNativeViewsInterceptors() ?? []
      )
    }

    internal func tap(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.tap.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.maketapInterceptors() ?? []
      )
    }

    internal func doubleTap(
      _ request: Patrol_TapRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.doubleTap.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedoubleTapInterceptors() ?? []
      )
    }

    internal func enterText(
      _ request: Patrol_EnterTextRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enterText.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenterTextInterceptors() ?? []
      )
    }

    internal func swipe(
      _ request: Patrol_SwipeRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.swipe.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeswipeInterceptors() ?? []
      )
    }

    internal func enableAirplaneMode(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableAirplaneMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableAirplaneModeInterceptors() ?? []
      )
    }

    internal func disableAirplaneMode(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableAirplaneMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableAirplaneModeInterceptors() ?? []
      )
    }

    internal func enableWiFi(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableWiFi.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableWiFiInterceptors() ?? []
      )
    }

    internal func disableWiFi(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableWiFi.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableWiFiInterceptors() ?? []
      )
    }

    internal func enableCellular(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableCellular.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableCellularInterceptors() ?? []
      )
    }

    internal func disableCellular(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableCellular.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableCellularInterceptors() ?? []
      )
    }

    internal func enableBluetooth(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableBluetooth.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableBluetoothInterceptors() ?? []
      )
    }

    internal func disableBluetooth(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableBluetooth.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableBluetoothInterceptors() ?? []
      )
    }

    internal func enableDarkMode(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.enableDarkMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeenableDarkModeInterceptors() ?? []
      )
    }

    internal func disableDarkMode(
      _ request: Patrol_DarkModeRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.disableDarkMode.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedisableDarkModeInterceptors() ?? []
      )
    }

    internal func openNotifications(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.openNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeopenNotificationsInterceptors() ?? []
      )
    }

    internal func closeNotifications(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.closeNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makecloseNotificationsInterceptors() ?? []
      )
    }

    internal func closeHeadsUpNotification(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.closeHeadsUpNotification.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makecloseHeadsUpNotificationInterceptors() ?? []
      )
    }

    internal func getNotifications(
      _ request: Patrol_GetNotificationsRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_GetNotificationsResponse {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.getNotifications.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makegetNotificationsInterceptors() ?? []
      )
    }

    internal func tapOnNotification(
      _ request: Patrol_TapOnNotificationRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.tapOnNotification.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.maketapOnNotificationInterceptors() ?? []
      )
    }

    internal func isPermissionDialogVisible(
      _ request: Patrol_PermissionDialogVisibleRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_PermissionDialogVisibleResponse {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.isPermissionDialogVisible.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makeisPermissionDialogVisibleInterceptors() ?? []
      )
    }

    internal func handlePermissionDialog(
      _ request: Patrol_HandlePermissionRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.handlePermissionDialog.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makehandlePermissionDialogInterceptors() ?? []
      )
    }

    internal func setLocationAccuracy(
      _ request: Patrol_SetLocationAccuracyRequest,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.setLocationAccuracy.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makesetLocationAccuracyInterceptors() ?? []
      )
    }

    internal func debug(
      _ request: Patrol_Empty,
      callOptions: CallOptions? = nil
    ) async throws -> Patrol_Empty {
      return try await self.performAsyncUnaryCall(
        path: Patrol_NativeAutomatorClientMetadata.Methods.debug.path,
        request: request,
        callOptions: callOptions ?? self.defaultCallOptions,
        interceptors: self.interceptors?.makedebugInterceptors() ?? []
      )
    }
  }

  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  internal struct Patrol_NativeAutomatorAsyncClient: Patrol_NativeAutomatorAsyncClientProtocol {
    internal var channel: GRPCChannel
    internal var defaultCallOptions: CallOptions
    internal var interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol?

    internal init(
      channel: GRPCChannel,
      defaultCallOptions: CallOptions = CallOptions(),
      interceptors: Patrol_NativeAutomatorClientInterceptorFactoryProtocol? = nil
    ) {
      self.channel = channel
      self.defaultCallOptions = defaultCallOptions
      self.interceptors = interceptors
    }
  }

#endif  // compiler(>=5.6)

internal protocol Patrol_NativeAutomatorClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'configure'.
  func makeconfigureInterceptors() -> [ClientInterceptor<Patrol_ConfigureRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'pressHome'.
  func makepressHomeInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'pressBack'.
  func makepressBackInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'pressRecentApps'.
  func makepressRecentAppsInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'doublePressRecentApps'.
  func makedoublePressRecentAppsInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'openApp'.
  func makeopenAppInterceptors() -> [ClientInterceptor<Patrol_OpenAppRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'openQuickSettings'.
  func makeopenQuickSettingsInterceptors() -> [ClientInterceptor<
    Patrol_OpenQuickSettingsRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when invoking 'getNativeViews'.
  func makegetNativeViewsInterceptors() -> [ClientInterceptor<
    Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse
  >]

  /// - Returns: Interceptors to use when invoking 'tap'.
  func maketapInterceptors() -> [ClientInterceptor<Patrol_TapRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'doubleTap'.
  func makedoubleTapInterceptors() -> [ClientInterceptor<Patrol_TapRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enterText'.
  func makeenterTextInterceptors() -> [ClientInterceptor<Patrol_EnterTextRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'swipe'.
  func makeswipeInterceptors() -> [ClientInterceptor<Patrol_SwipeRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enableAirplaneMode'.
  func makeenableAirplaneModeInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'disableAirplaneMode'.
  func makedisableAirplaneModeInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enableWiFi'.
  func makeenableWiFiInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'disableWiFi'.
  func makedisableWiFiInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enableCellular'.
  func makeenableCellularInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'disableCellular'.
  func makedisableCellularInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enableBluetooth'.
  func makeenableBluetoothInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'disableBluetooth'.
  func makedisableBluetoothInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'enableDarkMode'.
  func makeenableDarkModeInterceptors() -> [ClientInterceptor<Patrol_DarkModeRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'disableDarkMode'.
  func makedisableDarkModeInterceptors() -> [ClientInterceptor<
    Patrol_DarkModeRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when invoking 'openNotifications'.
  func makeopenNotificationsInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'closeNotifications'.
  func makecloseNotificationsInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'closeHeadsUpNotification'.
  func makecloseHeadsUpNotificationInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when invoking 'getNotifications'.
  func makegetNotificationsInterceptors() -> [ClientInterceptor<
    Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse
  >]

  /// - Returns: Interceptors to use when invoking 'tapOnNotification'.
  func maketapOnNotificationInterceptors() -> [ClientInterceptor<
    Patrol_TapOnNotificationRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when invoking 'isPermissionDialogVisible'.
  func makeisPermissionDialogVisibleInterceptors() -> [ClientInterceptor<
    Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse
  >]

  /// - Returns: Interceptors to use when invoking 'handlePermissionDialog'.
  func makehandlePermissionDialogInterceptors() -> [ClientInterceptor<
    Patrol_HandlePermissionRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when invoking 'setLocationAccuracy'.
  func makesetLocationAccuracyInterceptors() -> [ClientInterceptor<
    Patrol_SetLocationAccuracyRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when invoking 'debug'.
  func makedebugInterceptors() -> [ClientInterceptor<Patrol_Empty, Patrol_Empty>]
}

internal enum Patrol_NativeAutomatorClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NativeAutomator",
    fullName: "patrol.NativeAutomator",
    methods: [
      Patrol_NativeAutomatorClientMetadata.Methods.configure,
      Patrol_NativeAutomatorClientMetadata.Methods.pressHome,
      Patrol_NativeAutomatorClientMetadata.Methods.pressBack,
      Patrol_NativeAutomatorClientMetadata.Methods.pressRecentApps,
      Patrol_NativeAutomatorClientMetadata.Methods.doublePressRecentApps,
      Patrol_NativeAutomatorClientMetadata.Methods.openApp,
      Patrol_NativeAutomatorClientMetadata.Methods.openQuickSettings,
      Patrol_NativeAutomatorClientMetadata.Methods.getNativeViews,
      Patrol_NativeAutomatorClientMetadata.Methods.tap,
      Patrol_NativeAutomatorClientMetadata.Methods.doubleTap,
      Patrol_NativeAutomatorClientMetadata.Methods.enterText,
      Patrol_NativeAutomatorClientMetadata.Methods.swipe,
      Patrol_NativeAutomatorClientMetadata.Methods.enableAirplaneMode,
      Patrol_NativeAutomatorClientMetadata.Methods.disableAirplaneMode,
      Patrol_NativeAutomatorClientMetadata.Methods.enableWiFi,
      Patrol_NativeAutomatorClientMetadata.Methods.disableWiFi,
      Patrol_NativeAutomatorClientMetadata.Methods.enableCellular,
      Patrol_NativeAutomatorClientMetadata.Methods.disableCellular,
      Patrol_NativeAutomatorClientMetadata.Methods.enableBluetooth,
      Patrol_NativeAutomatorClientMetadata.Methods.disableBluetooth,
      Patrol_NativeAutomatorClientMetadata.Methods.enableDarkMode,
      Patrol_NativeAutomatorClientMetadata.Methods.disableDarkMode,
      Patrol_NativeAutomatorClientMetadata.Methods.openNotifications,
      Patrol_NativeAutomatorClientMetadata.Methods.closeNotifications,
      Patrol_NativeAutomatorClientMetadata.Methods.closeHeadsUpNotification,
      Patrol_NativeAutomatorClientMetadata.Methods.getNotifications,
      Patrol_NativeAutomatorClientMetadata.Methods.tapOnNotification,
      Patrol_NativeAutomatorClientMetadata.Methods.isPermissionDialogVisible,
      Patrol_NativeAutomatorClientMetadata.Methods.handlePermissionDialog,
      Patrol_NativeAutomatorClientMetadata.Methods.setLocationAccuracy,
      Patrol_NativeAutomatorClientMetadata.Methods.debug,
    ]
  )

  internal enum Methods {
    internal static let configure = GRPCMethodDescriptor(
      name: "configure",
      path: "/patrol.NativeAutomator/configure",
      type: GRPCCallType.unary
    )

    internal static let pressHome = GRPCMethodDescriptor(
      name: "pressHome",
      path: "/patrol.NativeAutomator/pressHome",
      type: GRPCCallType.unary
    )

    internal static let pressBack = GRPCMethodDescriptor(
      name: "pressBack",
      path: "/patrol.NativeAutomator/pressBack",
      type: GRPCCallType.unary
    )

    internal static let pressRecentApps = GRPCMethodDescriptor(
      name: "pressRecentApps",
      path: "/patrol.NativeAutomator/pressRecentApps",
      type: GRPCCallType.unary
    )

    internal static let doublePressRecentApps = GRPCMethodDescriptor(
      name: "doublePressRecentApps",
      path: "/patrol.NativeAutomator/doublePressRecentApps",
      type: GRPCCallType.unary
    )

    internal static let openApp = GRPCMethodDescriptor(
      name: "openApp",
      path: "/patrol.NativeAutomator/openApp",
      type: GRPCCallType.unary
    )

    internal static let openQuickSettings = GRPCMethodDescriptor(
      name: "openQuickSettings",
      path: "/patrol.NativeAutomator/openQuickSettings",
      type: GRPCCallType.unary
    )

    internal static let getNativeViews = GRPCMethodDescriptor(
      name: "getNativeViews",
      path: "/patrol.NativeAutomator/getNativeViews",
      type: GRPCCallType.unary
    )

    internal static let tap = GRPCMethodDescriptor(
      name: "tap",
      path: "/patrol.NativeAutomator/tap",
      type: GRPCCallType.unary
    )

    internal static let doubleTap = GRPCMethodDescriptor(
      name: "doubleTap",
      path: "/patrol.NativeAutomator/doubleTap",
      type: GRPCCallType.unary
    )

    internal static let enterText = GRPCMethodDescriptor(
      name: "enterText",
      path: "/patrol.NativeAutomator/enterText",
      type: GRPCCallType.unary
    )

    internal static let swipe = GRPCMethodDescriptor(
      name: "swipe",
      path: "/patrol.NativeAutomator/swipe",
      type: GRPCCallType.unary
    )

    internal static let enableAirplaneMode = GRPCMethodDescriptor(
      name: "enableAirplaneMode",
      path: "/patrol.NativeAutomator/enableAirplaneMode",
      type: GRPCCallType.unary
    )

    internal static let disableAirplaneMode = GRPCMethodDescriptor(
      name: "disableAirplaneMode",
      path: "/patrol.NativeAutomator/disableAirplaneMode",
      type: GRPCCallType.unary
    )

    internal static let enableWiFi = GRPCMethodDescriptor(
      name: "enableWiFi",
      path: "/patrol.NativeAutomator/enableWiFi",
      type: GRPCCallType.unary
    )

    internal static let disableWiFi = GRPCMethodDescriptor(
      name: "disableWiFi",
      path: "/patrol.NativeAutomator/disableWiFi",
      type: GRPCCallType.unary
    )

    internal static let enableCellular = GRPCMethodDescriptor(
      name: "enableCellular",
      path: "/patrol.NativeAutomator/enableCellular",
      type: GRPCCallType.unary
    )

    internal static let disableCellular = GRPCMethodDescriptor(
      name: "disableCellular",
      path: "/patrol.NativeAutomator/disableCellular",
      type: GRPCCallType.unary
    )

    internal static let enableBluetooth = GRPCMethodDescriptor(
      name: "enableBluetooth",
      path: "/patrol.NativeAutomator/enableBluetooth",
      type: GRPCCallType.unary
    )

    internal static let disableBluetooth = GRPCMethodDescriptor(
      name: "disableBluetooth",
      path: "/patrol.NativeAutomator/disableBluetooth",
      type: GRPCCallType.unary
    )

    internal static let enableDarkMode = GRPCMethodDescriptor(
      name: "enableDarkMode",
      path: "/patrol.NativeAutomator/enableDarkMode",
      type: GRPCCallType.unary
    )

    internal static let disableDarkMode = GRPCMethodDescriptor(
      name: "disableDarkMode",
      path: "/patrol.NativeAutomator/disableDarkMode",
      type: GRPCCallType.unary
    )

    internal static let openNotifications = GRPCMethodDescriptor(
      name: "openNotifications",
      path: "/patrol.NativeAutomator/openNotifications",
      type: GRPCCallType.unary
    )

    internal static let closeNotifications = GRPCMethodDescriptor(
      name: "closeNotifications",
      path: "/patrol.NativeAutomator/closeNotifications",
      type: GRPCCallType.unary
    )

    internal static let closeHeadsUpNotification = GRPCMethodDescriptor(
      name: "closeHeadsUpNotification",
      path: "/patrol.NativeAutomator/closeHeadsUpNotification",
      type: GRPCCallType.unary
    )

    internal static let getNotifications = GRPCMethodDescriptor(
      name: "getNotifications",
      path: "/patrol.NativeAutomator/getNotifications",
      type: GRPCCallType.unary
    )

    internal static let tapOnNotification = GRPCMethodDescriptor(
      name: "tapOnNotification",
      path: "/patrol.NativeAutomator/tapOnNotification",
      type: GRPCCallType.unary
    )

    internal static let isPermissionDialogVisible = GRPCMethodDescriptor(
      name: "isPermissionDialogVisible",
      path: "/patrol.NativeAutomator/isPermissionDialogVisible",
      type: GRPCCallType.unary
    )

    internal static let handlePermissionDialog = GRPCMethodDescriptor(
      name: "handlePermissionDialog",
      path: "/patrol.NativeAutomator/handlePermissionDialog",
      type: GRPCCallType.unary
    )

    internal static let setLocationAccuracy = GRPCMethodDescriptor(
      name: "setLocationAccuracy",
      path: "/patrol.NativeAutomator/setLocationAccuracy",
      type: GRPCCallType.unary
    )

    internal static let debug = GRPCMethodDescriptor(
      name: "debug",
      path: "/patrol.NativeAutomator/debug",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Patrol_NativeAutomatorProvider: CallHandlerProvider {
  var interceptors: Patrol_NativeAutomatorServerInterceptorFactoryProtocol? { get }

  func configure(request: Patrol_ConfigureRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  /// general
  func pressHome(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func pressBack(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func pressRecentApps(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func doublePressRecentApps(request: Patrol_Empty, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  func openApp(request: Patrol_OpenAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func openQuickSettings(request: Patrol_OpenQuickSettingsRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  /// general UI interaction
  func getNativeViews(request: Patrol_GetNativeViewsRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_GetNativeViewsResponse>

  func tap(request: Patrol_TapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func doubleTap(request: Patrol_TapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func enterText(request: Patrol_EnterTextRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  func swipe(request: Patrol_SwipeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  /// services
  func enableAirplaneMode(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func disableAirplaneMode(request: Patrol_Empty, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  func enableWiFi(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func disableWiFi(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func enableCellular(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func disableCellular(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func enableBluetooth(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func disableBluetooth(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func enableDarkMode(request: Patrol_DarkModeRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  func disableDarkMode(request: Patrol_DarkModeRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  /// notifications
  func openNotifications(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func closeNotifications(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<
    Patrol_Empty
  >

  func closeHeadsUpNotification(request: Patrol_Empty, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  func getNotifications(request: Patrol_GetNotificationsRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_GetNotificationsResponse>

  func tapOnNotification(request: Patrol_TapOnNotificationRequest, context: StatusOnlyCallContext)
    -> EventLoopFuture<Patrol_Empty>

  /// permissions
  func isPermissionDialogVisible(
    request: Patrol_PermissionDialogVisibleRequest, context: StatusOnlyCallContext
  ) -> EventLoopFuture<Patrol_PermissionDialogVisibleResponse>

  func handlePermissionDialog(
    request: Patrol_HandlePermissionRequest, context: StatusOnlyCallContext
  ) -> EventLoopFuture<Patrol_Empty>

  func setLocationAccuracy(
    request: Patrol_SetLocationAccuracyRequest, context: StatusOnlyCallContext
  ) -> EventLoopFuture<Patrol_Empty>

  func debug(request: Patrol_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Patrol_Empty>
}

extension Patrol_NativeAutomatorProvider {
  internal var serviceName: Substring {
    return Patrol_NativeAutomatorServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "configure":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_ConfigureRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeconfigureInterceptors() ?? [],
        userFunction: self.configure(request:context:)
      )

    case "pressHome":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makepressHomeInterceptors() ?? [],
        userFunction: self.pressHome(request:context:)
      )

    case "pressBack":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makepressBackInterceptors() ?? [],
        userFunction: self.pressBack(request:context:)
      )

    case "pressRecentApps":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makepressRecentAppsInterceptors() ?? [],
        userFunction: self.pressRecentApps(request:context:)
      )

    case "doublePressRecentApps":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedoublePressRecentAppsInterceptors() ?? [],
        userFunction: self.doublePressRecentApps(request:context:)
      )

    case "openApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_OpenAppRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeopenAppInterceptors() ?? [],
        userFunction: self.openApp(request:context:)
      )

    case "openQuickSettings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_OpenQuickSettingsRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeopenQuickSettingsInterceptors() ?? [],
        userFunction: self.openQuickSettings(request:context:)
      )

    case "getNativeViews":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_GetNativeViewsRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_GetNativeViewsResponse>(),
        interceptors: self.interceptors?.makegetNativeViewsInterceptors() ?? [],
        userFunction: self.getNativeViews(request:context:)
      )

    case "tap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_TapRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.maketapInterceptors() ?? [],
        userFunction: self.tap(request:context:)
      )

    case "doubleTap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_TapRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedoubleTapInterceptors() ?? [],
        userFunction: self.doubleTap(request:context:)
      )

    case "enterText":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_EnterTextRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenterTextInterceptors() ?? [],
        userFunction: self.enterText(request:context:)
      )

    case "swipe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_SwipeRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeswipeInterceptors() ?? [],
        userFunction: self.swipe(request:context:)
      )

    case "enableAirplaneMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenableAirplaneModeInterceptors() ?? [],
        userFunction: self.enableAirplaneMode(request:context:)
      )

    case "disableAirplaneMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedisableAirplaneModeInterceptors() ?? [],
        userFunction: self.disableAirplaneMode(request:context:)
      )

    case "enableWiFi":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenableWiFiInterceptors() ?? [],
        userFunction: self.enableWiFi(request:context:)
      )

    case "disableWiFi":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedisableWiFiInterceptors() ?? [],
        userFunction: self.disableWiFi(request:context:)
      )

    case "enableCellular":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenableCellularInterceptors() ?? [],
        userFunction: self.enableCellular(request:context:)
      )

    case "disableCellular":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedisableCellularInterceptors() ?? [],
        userFunction: self.disableCellular(request:context:)
      )

    case "enableBluetooth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenableBluetoothInterceptors() ?? [],
        userFunction: self.enableBluetooth(request:context:)
      )

    case "disableBluetooth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedisableBluetoothInterceptors() ?? [],
        userFunction: self.disableBluetooth(request:context:)
      )

    case "enableDarkMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_DarkModeRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeenableDarkModeInterceptors() ?? [],
        userFunction: self.enableDarkMode(request:context:)
      )

    case "disableDarkMode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_DarkModeRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedisableDarkModeInterceptors() ?? [],
        userFunction: self.disableDarkMode(request:context:)
      )

    case "openNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makeopenNotificationsInterceptors() ?? [],
        userFunction: self.openNotifications(request:context:)
      )

    case "closeNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makecloseNotificationsInterceptors() ?? [],
        userFunction: self.closeNotifications(request:context:)
      )

    case "closeHeadsUpNotification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makecloseHeadsUpNotificationInterceptors() ?? [],
        userFunction: self.closeHeadsUpNotification(request:context:)
      )

    case "getNotifications":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_GetNotificationsRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_GetNotificationsResponse>(),
        interceptors: self.interceptors?.makegetNotificationsInterceptors() ?? [],
        userFunction: self.getNotifications(request:context:)
      )

    case "tapOnNotification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_TapOnNotificationRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.maketapOnNotificationInterceptors() ?? [],
        userFunction: self.tapOnNotification(request:context:)
      )

    case "isPermissionDialogVisible":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_PermissionDialogVisibleRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_PermissionDialogVisibleResponse>(),
        interceptors: self.interceptors?.makeisPermissionDialogVisibleInterceptors() ?? [],
        userFunction: self.isPermissionDialogVisible(request:context:)
      )

    case "handlePermissionDialog":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_HandlePermissionRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makehandlePermissionDialogInterceptors() ?? [],
        userFunction: self.handlePermissionDialog(request:context:)
      )

    case "setLocationAccuracy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_SetLocationAccuracyRequest>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makesetLocationAccuracyInterceptors() ?? [],
        userFunction: self.setLocationAccuracy(request:context:)
      )

    case "debug":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
        responseSerializer: ProtobufSerializer<Patrol_Empty>(),
        interceptors: self.interceptors?.makedebugInterceptors() ?? [],
        userFunction: self.debug(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

  /// To implement a server, implement an object which conforms to this protocol.
  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  internal protocol Patrol_NativeAutomatorAsyncProvider: CallHandlerProvider {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Patrol_NativeAutomatorServerInterceptorFactoryProtocol? { get }

    @Sendable func configure(
      request: Patrol_ConfigureRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    /// general
    @Sendable func pressHome(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func pressBack(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func pressRecentApps(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func doublePressRecentApps(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func openApp(
      request: Patrol_OpenAppRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func openQuickSettings(
      request: Patrol_OpenQuickSettingsRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    /// general UI interaction
    @Sendable func getNativeViews(
      request: Patrol_GetNativeViewsRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_GetNativeViewsResponse

    @Sendable func tap(
      request: Patrol_TapRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func doubleTap(
      request: Patrol_TapRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func enterText(
      request: Patrol_EnterTextRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func swipe(
      request: Patrol_SwipeRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    /// services
    @Sendable func enableAirplaneMode(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func disableAirplaneMode(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func enableWiFi(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func disableWiFi(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func enableCellular(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func disableCellular(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func enableBluetooth(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func disableBluetooth(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func enableDarkMode(
      request: Patrol_DarkModeRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func disableDarkMode(
      request: Patrol_DarkModeRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    /// notifications
    @Sendable func openNotifications(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func closeNotifications(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func closeHeadsUpNotification(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func getNotifications(
      request: Patrol_GetNotificationsRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_GetNotificationsResponse

    @Sendable func tapOnNotification(
      request: Patrol_TapOnNotificationRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    /// permissions
    @Sendable func isPermissionDialogVisible(
      request: Patrol_PermissionDialogVisibleRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_PermissionDialogVisibleResponse

    @Sendable func handlePermissionDialog(
      request: Patrol_HandlePermissionRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func setLocationAccuracy(
      request: Patrol_SetLocationAccuracyRequest,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty

    @Sendable func debug(
      request: Patrol_Empty,
      context: GRPCAsyncServerCallContext
    ) async throws -> Patrol_Empty
  }

  @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
  extension Patrol_NativeAutomatorAsyncProvider {
    internal static var serviceDescriptor: GRPCServiceDescriptor {
      return Patrol_NativeAutomatorServerMetadata.serviceDescriptor
    }

    internal var serviceName: Substring {
      return Patrol_NativeAutomatorServerMetadata.serviceDescriptor.fullName[...]
    }

    internal var interceptors: Patrol_NativeAutomatorServerInterceptorFactoryProtocol? {
      return nil
    }

    internal func handle(
      method name: Substring,
      context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
      switch name {
      case "configure":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_ConfigureRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeconfigureInterceptors() ?? [],
          wrapping: self.configure(request:context:)
        )

      case "pressHome":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makepressHomeInterceptors() ?? [],
          wrapping: self.pressHome(request:context:)
        )

      case "pressBack":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makepressBackInterceptors() ?? [],
          wrapping: self.pressBack(request:context:)
        )

      case "pressRecentApps":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makepressRecentAppsInterceptors() ?? [],
          wrapping: self.pressRecentApps(request:context:)
        )

      case "doublePressRecentApps":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedoublePressRecentAppsInterceptors() ?? [],
          wrapping: self.doublePressRecentApps(request:context:)
        )

      case "openApp":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_OpenAppRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeopenAppInterceptors() ?? [],
          wrapping: self.openApp(request:context:)
        )

      case "openQuickSettings":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_OpenQuickSettingsRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeopenQuickSettingsInterceptors() ?? [],
          wrapping: self.openQuickSettings(request:context:)
        )

      case "getNativeViews":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_GetNativeViewsRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_GetNativeViewsResponse>(),
          interceptors: self.interceptors?.makegetNativeViewsInterceptors() ?? [],
          wrapping: self.getNativeViews(request:context:)
        )

      case "tap":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_TapRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.maketapInterceptors() ?? [],
          wrapping: self.tap(request:context:)
        )

      case "doubleTap":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_TapRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedoubleTapInterceptors() ?? [],
          wrapping: self.doubleTap(request:context:)
        )

      case "enterText":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_EnterTextRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenterTextInterceptors() ?? [],
          wrapping: self.enterText(request:context:)
        )

      case "swipe":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_SwipeRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeswipeInterceptors() ?? [],
          wrapping: self.swipe(request:context:)
        )

      case "enableAirplaneMode":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenableAirplaneModeInterceptors() ?? [],
          wrapping: self.enableAirplaneMode(request:context:)
        )

      case "disableAirplaneMode":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedisableAirplaneModeInterceptors() ?? [],
          wrapping: self.disableAirplaneMode(request:context:)
        )

      case "enableWiFi":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenableWiFiInterceptors() ?? [],
          wrapping: self.enableWiFi(request:context:)
        )

      case "disableWiFi":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedisableWiFiInterceptors() ?? [],
          wrapping: self.disableWiFi(request:context:)
        )

      case "enableCellular":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenableCellularInterceptors() ?? [],
          wrapping: self.enableCellular(request:context:)
        )

      case "disableCellular":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedisableCellularInterceptors() ?? [],
          wrapping: self.disableCellular(request:context:)
        )

      case "enableBluetooth":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenableBluetoothInterceptors() ?? [],
          wrapping: self.enableBluetooth(request:context:)
        )

      case "disableBluetooth":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedisableBluetoothInterceptors() ?? [],
          wrapping: self.disableBluetooth(request:context:)
        )

      case "enableDarkMode":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_DarkModeRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeenableDarkModeInterceptors() ?? [],
          wrapping: self.enableDarkMode(request:context:)
        )

      case "disableDarkMode":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_DarkModeRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedisableDarkModeInterceptors() ?? [],
          wrapping: self.disableDarkMode(request:context:)
        )

      case "openNotifications":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makeopenNotificationsInterceptors() ?? [],
          wrapping: self.openNotifications(request:context:)
        )

      case "closeNotifications":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makecloseNotificationsInterceptors() ?? [],
          wrapping: self.closeNotifications(request:context:)
        )

      case "closeHeadsUpNotification":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makecloseHeadsUpNotificationInterceptors() ?? [],
          wrapping: self.closeHeadsUpNotification(request:context:)
        )

      case "getNotifications":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_GetNotificationsRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_GetNotificationsResponse>(),
          interceptors: self.interceptors?.makegetNotificationsInterceptors() ?? [],
          wrapping: self.getNotifications(request:context:)
        )

      case "tapOnNotification":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_TapOnNotificationRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.maketapOnNotificationInterceptors() ?? [],
          wrapping: self.tapOnNotification(request:context:)
        )

      case "isPermissionDialogVisible":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_PermissionDialogVisibleRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_PermissionDialogVisibleResponse>(),
          interceptors: self.interceptors?.makeisPermissionDialogVisibleInterceptors() ?? [],
          wrapping: self.isPermissionDialogVisible(request:context:)
        )

      case "handlePermissionDialog":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_HandlePermissionRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makehandlePermissionDialogInterceptors() ?? [],
          wrapping: self.handlePermissionDialog(request:context:)
        )

      case "setLocationAccuracy":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_SetLocationAccuracyRequest>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makesetLocationAccuracyInterceptors() ?? [],
          wrapping: self.setLocationAccuracy(request:context:)
        )

      case "debug":
        return GRPCAsyncServerHandler(
          context: context,
          requestDeserializer: ProtobufDeserializer<Patrol_Empty>(),
          responseSerializer: ProtobufSerializer<Patrol_Empty>(),
          interceptors: self.interceptors?.makedebugInterceptors() ?? [],
          wrapping: self.debug(request:context:)
        )

      default:
        return nil
      }
    }
  }

#endif  // compiler(>=5.6)

internal protocol Patrol_NativeAutomatorServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'configure'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeconfigureInterceptors() -> [ServerInterceptor<Patrol_ConfigureRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'pressHome'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepressHomeInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'pressBack'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepressBackInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'pressRecentApps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepressRecentAppsInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'doublePressRecentApps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedoublePressRecentAppsInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'openApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeopenAppInterceptors() -> [ServerInterceptor<Patrol_OpenAppRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'openQuickSettings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeopenQuickSettingsInterceptors() -> [ServerInterceptor<
    Patrol_OpenQuickSettingsRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when handling 'getNativeViews'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetNativeViewsInterceptors() -> [ServerInterceptor<
    Patrol_GetNativeViewsRequest, Patrol_GetNativeViewsResponse
  >]

  /// - Returns: Interceptors to use when handling 'tap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func maketapInterceptors() -> [ServerInterceptor<Patrol_TapRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'doubleTap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedoubleTapInterceptors() -> [ServerInterceptor<Patrol_TapRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enterText'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenterTextInterceptors() -> [ServerInterceptor<Patrol_EnterTextRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'swipe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeswipeInterceptors() -> [ServerInterceptor<Patrol_SwipeRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enableAirplaneMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenableAirplaneModeInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'disableAirplaneMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedisableAirplaneModeInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enableWiFi'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenableWiFiInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'disableWiFi'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedisableWiFiInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enableCellular'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenableCellularInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'disableCellular'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedisableCellularInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enableBluetooth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenableBluetoothInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'disableBluetooth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedisableBluetoothInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'enableDarkMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeenableDarkModeInterceptors() -> [ServerInterceptor<Patrol_DarkModeRequest, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'disableDarkMode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedisableDarkModeInterceptors() -> [ServerInterceptor<
    Patrol_DarkModeRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when handling 'openNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeopenNotificationsInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'closeNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecloseNotificationsInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'closeHeadsUpNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecloseHeadsUpNotificationInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]

  /// - Returns: Interceptors to use when handling 'getNotifications'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetNotificationsInterceptors() -> [ServerInterceptor<
    Patrol_GetNotificationsRequest, Patrol_GetNotificationsResponse
  >]

  /// - Returns: Interceptors to use when handling 'tapOnNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func maketapOnNotificationInterceptors() -> [ServerInterceptor<
    Patrol_TapOnNotificationRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when handling 'isPermissionDialogVisible'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeisPermissionDialogVisibleInterceptors() -> [ServerInterceptor<
    Patrol_PermissionDialogVisibleRequest, Patrol_PermissionDialogVisibleResponse
  >]

  /// - Returns: Interceptors to use when handling 'handlePermissionDialog'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makehandlePermissionDialogInterceptors() -> [ServerInterceptor<
    Patrol_HandlePermissionRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when handling 'setLocationAccuracy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesetLocationAccuracyInterceptors() -> [ServerInterceptor<
    Patrol_SetLocationAccuracyRequest, Patrol_Empty
  >]

  /// - Returns: Interceptors to use when handling 'debug'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedebugInterceptors() -> [ServerInterceptor<Patrol_Empty, Patrol_Empty>]
}

internal enum Patrol_NativeAutomatorServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NativeAutomator",
    fullName: "patrol.NativeAutomator",
    methods: [
      Patrol_NativeAutomatorServerMetadata.Methods.configure,
      Patrol_NativeAutomatorServerMetadata.Methods.pressHome,
      Patrol_NativeAutomatorServerMetadata.Methods.pressBack,
      Patrol_NativeAutomatorServerMetadata.Methods.pressRecentApps,
      Patrol_NativeAutomatorServerMetadata.Methods.doublePressRecentApps,
      Patrol_NativeAutomatorServerMetadata.Methods.openApp,
      Patrol_NativeAutomatorServerMetadata.Methods.openQuickSettings,
      Patrol_NativeAutomatorServerMetadata.Methods.getNativeViews,
      Patrol_NativeAutomatorServerMetadata.Methods.tap,
      Patrol_NativeAutomatorServerMetadata.Methods.doubleTap,
      Patrol_NativeAutomatorServerMetadata.Methods.enterText,
      Patrol_NativeAutomatorServerMetadata.Methods.swipe,
      Patrol_NativeAutomatorServerMetadata.Methods.enableAirplaneMode,
      Patrol_NativeAutomatorServerMetadata.Methods.disableAirplaneMode,
      Patrol_NativeAutomatorServerMetadata.Methods.enableWiFi,
      Patrol_NativeAutomatorServerMetadata.Methods.disableWiFi,
      Patrol_NativeAutomatorServerMetadata.Methods.enableCellular,
      Patrol_NativeAutomatorServerMetadata.Methods.disableCellular,
      Patrol_NativeAutomatorServerMetadata.Methods.enableBluetooth,
      Patrol_NativeAutomatorServerMetadata.Methods.disableBluetooth,
      Patrol_NativeAutomatorServerMetadata.Methods.enableDarkMode,
      Patrol_NativeAutomatorServerMetadata.Methods.disableDarkMode,
      Patrol_NativeAutomatorServerMetadata.Methods.openNotifications,
      Patrol_NativeAutomatorServerMetadata.Methods.closeNotifications,
      Patrol_NativeAutomatorServerMetadata.Methods.closeHeadsUpNotification,
      Patrol_NativeAutomatorServerMetadata.Methods.getNotifications,
      Patrol_NativeAutomatorServerMetadata.Methods.tapOnNotification,
      Patrol_NativeAutomatorServerMetadata.Methods.isPermissionDialogVisible,
      Patrol_NativeAutomatorServerMetadata.Methods.handlePermissionDialog,
      Patrol_NativeAutomatorServerMetadata.Methods.setLocationAccuracy,
      Patrol_NativeAutomatorServerMetadata.Methods.debug,
    ]
  )

  internal enum Methods {
    internal static let configure = GRPCMethodDescriptor(
      name: "configure",
      path: "/patrol.NativeAutomator/configure",
      type: GRPCCallType.unary
    )

    internal static let pressHome = GRPCMethodDescriptor(
      name: "pressHome",
      path: "/patrol.NativeAutomator/pressHome",
      type: GRPCCallType.unary
    )

    internal static let pressBack = GRPCMethodDescriptor(
      name: "pressBack",
      path: "/patrol.NativeAutomator/pressBack",
      type: GRPCCallType.unary
    )

    internal static let pressRecentApps = GRPCMethodDescriptor(
      name: "pressRecentApps",
      path: "/patrol.NativeAutomator/pressRecentApps",
      type: GRPCCallType.unary
    )

    internal static let doublePressRecentApps = GRPCMethodDescriptor(
      name: "doublePressRecentApps",
      path: "/patrol.NativeAutomator/doublePressRecentApps",
      type: GRPCCallType.unary
    )

    internal static let openApp = GRPCMethodDescriptor(
      name: "openApp",
      path: "/patrol.NativeAutomator/openApp",
      type: GRPCCallType.unary
    )

    internal static let openQuickSettings = GRPCMethodDescriptor(
      name: "openQuickSettings",
      path: "/patrol.NativeAutomator/openQuickSettings",
      type: GRPCCallType.unary
    )

    internal static let getNativeViews = GRPCMethodDescriptor(
      name: "getNativeViews",
      path: "/patrol.NativeAutomator/getNativeViews",
      type: GRPCCallType.unary
    )

    internal static let tap = GRPCMethodDescriptor(
      name: "tap",
      path: "/patrol.NativeAutomator/tap",
      type: GRPCCallType.unary
    )

    internal static let doubleTap = GRPCMethodDescriptor(
      name: "doubleTap",
      path: "/patrol.NativeAutomator/doubleTap",
      type: GRPCCallType.unary
    )

    internal static let enterText = GRPCMethodDescriptor(
      name: "enterText",
      path: "/patrol.NativeAutomator/enterText",
      type: GRPCCallType.unary
    )

    internal static let swipe = GRPCMethodDescriptor(
      name: "swipe",
      path: "/patrol.NativeAutomator/swipe",
      type: GRPCCallType.unary
    )

    internal static let enableAirplaneMode = GRPCMethodDescriptor(
      name: "enableAirplaneMode",
      path: "/patrol.NativeAutomator/enableAirplaneMode",
      type: GRPCCallType.unary
    )

    internal static let disableAirplaneMode = GRPCMethodDescriptor(
      name: "disableAirplaneMode",
      path: "/patrol.NativeAutomator/disableAirplaneMode",
      type: GRPCCallType.unary
    )

    internal static let enableWiFi = GRPCMethodDescriptor(
      name: "enableWiFi",
      path: "/patrol.NativeAutomator/enableWiFi",
      type: GRPCCallType.unary
    )

    internal static let disableWiFi = GRPCMethodDescriptor(
      name: "disableWiFi",
      path: "/patrol.NativeAutomator/disableWiFi",
      type: GRPCCallType.unary
    )

    internal static let enableCellular = GRPCMethodDescriptor(
      name: "enableCellular",
      path: "/patrol.NativeAutomator/enableCellular",
      type: GRPCCallType.unary
    )

    internal static let disableCellular = GRPCMethodDescriptor(
      name: "disableCellular",
      path: "/patrol.NativeAutomator/disableCellular",
      type: GRPCCallType.unary
    )

    internal static let enableBluetooth = GRPCMethodDescriptor(
      name: "enableBluetooth",
      path: "/patrol.NativeAutomator/enableBluetooth",
      type: GRPCCallType.unary
    )

    internal static let disableBluetooth = GRPCMethodDescriptor(
      name: "disableBluetooth",
      path: "/patrol.NativeAutomator/disableBluetooth",
      type: GRPCCallType.unary
    )

    internal static let enableDarkMode = GRPCMethodDescriptor(
      name: "enableDarkMode",
      path: "/patrol.NativeAutomator/enableDarkMode",
      type: GRPCCallType.unary
    )

    internal static let disableDarkMode = GRPCMethodDescriptor(
      name: "disableDarkMode",
      path: "/patrol.NativeAutomator/disableDarkMode",
      type: GRPCCallType.unary
    )

    internal static let openNotifications = GRPCMethodDescriptor(
      name: "openNotifications",
      path: "/patrol.NativeAutomator/openNotifications",
      type: GRPCCallType.unary
    )

    internal static let closeNotifications = GRPCMethodDescriptor(
      name: "closeNotifications",
      path: "/patrol.NativeAutomator/closeNotifications",
      type: GRPCCallType.unary
    )

    internal static let closeHeadsUpNotification = GRPCMethodDescriptor(
      name: "closeHeadsUpNotification",
      path: "/patrol.NativeAutomator/closeHeadsUpNotification",
      type: GRPCCallType.unary
    )

    internal static let getNotifications = GRPCMethodDescriptor(
      name: "getNotifications",
      path: "/patrol.NativeAutomator/getNotifications",
      type: GRPCCallType.unary
    )

    internal static let tapOnNotification = GRPCMethodDescriptor(
      name: "tapOnNotification",
      path: "/patrol.NativeAutomator/tapOnNotification",
      type: GRPCCallType.unary
    )

    internal static let isPermissionDialogVisible = GRPCMethodDescriptor(
      name: "isPermissionDialogVisible",
      path: "/patrol.NativeAutomator/isPermissionDialogVisible",
      type: GRPCCallType.unary
    )

    internal static let handlePermissionDialog = GRPCMethodDescriptor(
      name: "handlePermissionDialog",
      path: "/patrol.NativeAutomator/handlePermissionDialog",
      type: GRPCCallType.unary
    )

    internal static let setLocationAccuracy = GRPCMethodDescriptor(
      name: "setLocationAccuracy",
      path: "/patrol.NativeAutomator/setLocationAccuracy",
      type: GRPCCallType.unary
    )

    internal static let debug = GRPCMethodDescriptor(
      name: "debug",
      path: "/patrol.NativeAutomator/debug",
      type: GRPCCallType.unary
    )
  }
}
