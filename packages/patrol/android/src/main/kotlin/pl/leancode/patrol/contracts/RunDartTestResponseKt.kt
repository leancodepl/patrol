// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package pl.leancode.patrol.contracts;

@kotlin.jvm.JvmName("-initializerunDartTestResponse")
public inline fun runDartTestResponse(block: pl.leancode.patrol.contracts.RunDartTestResponseKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.RunDartTestResponse =
  pl.leancode.patrol.contracts.RunDartTestResponseKt.Dsl._create(pl.leancode.patrol.contracts.Contracts.RunDartTestResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `patrol.RunDartTestResponse`
 */
public object RunDartTestResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: pl.leancode.patrol.contracts.Contracts.RunDartTestResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.patrol.contracts.Contracts.RunDartTestResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.patrol.contracts.Contracts.RunDartTestResponse = _builder.build()

    /**
     * `.patrol.RunDartTestResponse.Result result = 1;`
     */
    public var result: pl.leancode.patrol.contracts.Contracts.RunDartTestResponse.Result
      @JvmName("getResult")
      get() = _builder.getResult()
      @JvmName("setResult")
      set(value) {
        _builder.setResult(value)
      }
    public var resultValue: kotlin.Int
      @JvmName("getResultValue")
      get() = _builder.getResultValue()
      @JvmName("setResultValue")
      set(value) {
        _builder.setResultValue(value)
      }
    /**
     * `.patrol.RunDartTestResponse.Result result = 1;`
     */
    public fun clearResult() {
      _builder.clearResult()
    }

    /**
     * `optional string details = 2;`
     */
    public var details: kotlin.String
      @JvmName("getDetails")
      get() = _builder.getDetails()
      @JvmName("setDetails")
      set(value) {
        _builder.setDetails(value)
      }
    /**
     * `optional string details = 2;`
     */
    public fun clearDetails() {
      _builder.clearDetails()
    }
    /**
     * `optional string details = 2;`
     * @return Whether the details field is set.
     */
    public fun hasDetails(): kotlin.Boolean {
      return _builder.hasDetails()
    }
  }
}
public inline fun pl.leancode.patrol.contracts.Contracts.RunDartTestResponse.copy(block: pl.leancode.patrol.contracts.RunDartTestResponseKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.RunDartTestResponse =
  pl.leancode.patrol.contracts.RunDartTestResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

