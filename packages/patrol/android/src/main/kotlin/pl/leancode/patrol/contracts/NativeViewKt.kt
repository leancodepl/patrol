// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package pl.leancode.patrol.contracts;

@kotlin.jvm.JvmName("-initializenativeView")
public inline fun nativeView(block: pl.leancode.patrol.contracts.NativeViewKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.NativeView =
  pl.leancode.patrol.contracts.NativeViewKt.Dsl._create(pl.leancode.patrol.contracts.Contracts.NativeView.newBuilder()).apply { block() }._build()
/**
 * ```
 * Represents a native UI control.
 *
 * On Android, this is `android.view.View`.
 * ```
 *
 * Protobuf type `patrol.NativeView`
 */
public object NativeViewKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: pl.leancode.patrol.contracts.Contracts.NativeView.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.patrol.contracts.Contracts.NativeView.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.patrol.contracts.Contracts.NativeView = _builder.build()

    /**
     * `string className = 1;`
     */
    public var className: kotlin.String
      @JvmName("getClassName")
      get() = _builder.getClassName()
      @JvmName("setClassName")
      set(value) {
        _builder.setClassName(value)
      }
    /**
     * `string className = 1;`
     */
    public fun clearClassName() {
      _builder.clearClassName()
    }

    /**
     * `string text = 2;`
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * `string text = 2;`
     */
    public fun clearText() {
      _builder.clearText()
    }

    /**
     * `string contentDescription = 3;`
     */
    public var contentDescription: kotlin.String
      @JvmName("getContentDescription")
      get() = _builder.getContentDescription()
      @JvmName("setContentDescription")
      set(value) {
        _builder.setContentDescription(value)
      }
    /**
     * `string contentDescription = 3;`
     */
    public fun clearContentDescription() {
      _builder.clearContentDescription()
    }

    /**
     * <code>bool focused = 4;</code>
     */
    public var focused: kotlin.Boolean
      @JvmName("getFocused")
      get() = _builder.getFocused()
      @JvmName("setFocused")
      set(value) {
        _builder.setFocused(value)
      }
    /**
     * `bool focused = 4;`
     */
    public fun clearFocused() {
      _builder.clearFocused()
    }

    /**
     * <code>bool enabled = 5;</code>
     */
    public var enabled: kotlin.Boolean
      @JvmName("getEnabled")
      get() = _builder.getEnabled()
      @JvmName("setEnabled")
      set(value) {
        _builder.setEnabled(value)
      }
    /**
     * `bool enabled = 5;`
     */
    public fun clearEnabled() {
      _builder.clearEnabled()
    }

    /**
     * <code>int32 childCount = 6;</code>
     */
    public var childCount: kotlin.Int
      @JvmName("getChildCount")
      get() = _builder.getChildCount()
      @JvmName("setChildCount")
      set(value) {
        _builder.setChildCount(value)
      }
    /**
     * `int32 childCount = 6;`
     */
    public fun clearChildCount() {
      _builder.clearChildCount()
    }

    /**
     * `string resourceName = 7;`
     */
    public var resourceName: kotlin.String
      @JvmName("getResourceName")
      get() = _builder.getResourceName()
      @JvmName("setResourceName")
      set(value) {
        _builder.setResourceName(value)
      }
    /**
     * `string resourceName = 7;`
     */
    public fun clearResourceName() {
      _builder.clearResourceName()
    }

    /**
     * `string applicationPackage = 8;`
     */
    public var applicationPackage: kotlin.String
      @JvmName("getApplicationPackage")
      get() = _builder.getApplicationPackage()
      @JvmName("setApplicationPackage")
      set(value) {
        _builder.setApplicationPackage(value)
      }
    /**
     * `string applicationPackage = 8;`
     */
    public fun clearApplicationPackage() {
      _builder.clearApplicationPackage()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ChildrenProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .patrol.NativeView children = 9;`
     */
     public val children: com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getChildrenList()
      )
    /**
     * `repeated .patrol.NativeView children = 9;`
     * @param value The children to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addChildren")
    public fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.add(value: pl.leancode.patrol.contracts.Contracts.NativeView) {
      _builder.addChildren(value)
    }
    /**
     * `repeated .patrol.NativeView children = 9;`
     * @param value The children to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignChildren")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.plusAssign(value: pl.leancode.patrol.contracts.Contracts.NativeView) {
      add(value)
    }
    /**
     * `repeated .patrol.NativeView children = 9;`
     * @param values The children to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllChildren")
    public fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.addAll(values: kotlin.collections.Iterable<pl.leancode.patrol.contracts.Contracts.NativeView>) {
      _builder.addAllChildren(values)
    }
    /**
     * `repeated .patrol.NativeView children = 9;`
     * @param values The children to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllChildren")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.plusAssign(values: kotlin.collections.Iterable<pl.leancode.patrol.contracts.Contracts.NativeView>) {
      addAll(values)
    }
    /**
     * `repeated .patrol.NativeView children = 9;`
     * @param index The index to set the value at.
     * @param value The children to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setChildren")
    public operator fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.set(index: kotlin.Int, value: pl.leancode.patrol.contracts.Contracts.NativeView) {
      _builder.setChildren(index, value)
    }
    /**
     * `repeated .patrol.NativeView children = 9;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearChildren")
    public fun com.google.protobuf.kotlin.DslList<pl.leancode.patrol.contracts.Contracts.NativeView, ChildrenProxy>.clear() {
      _builder.clearChildren()
    }
  }
}
public inline fun pl.leancode.patrol.contracts.Contracts.NativeView.copy(block: pl.leancode.patrol.contracts.NativeViewKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.NativeView =
  pl.leancode.patrol.contracts.NativeViewKt.Dsl._create(this.toBuilder()).apply { block() }._build()

