// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package pl.leancode.patrol.contracts;

@kotlin.jvm.JvmName("-initializewaitUntilVisibleRequest")
public inline fun waitUntilVisibleRequest(block: pl.leancode.patrol.contracts.WaitUntilVisibleRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest =
  pl.leancode.patrol.contracts.WaitUntilVisibleRequestKt.Dsl._create(pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `patrol.WaitUntilVisibleRequest`
 */
public object WaitUntilVisibleRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest = _builder.build()

    /**
     * `.patrol.Selector selector = 1;`
     */
    public var selector: pl.leancode.patrol.contracts.Contracts.Selector
      @JvmName("getSelector")
      get() = _builder.getSelector()
      @JvmName("setSelector")
      set(value) {
        _builder.setSelector(value)
      }
    /**
     * `.patrol.Selector selector = 1;`
     */
    public fun clearSelector() {
      _builder.clearSelector()
    }
    /**
     * `.patrol.Selector selector = 1;`
     * @return Whether the selector field is set.
     */
    public fun hasSelector(): kotlin.Boolean {
      return _builder.hasSelector()
    }

    /**
     * `string appId = 2;`
     */
    public var appId: kotlin.String
      @JvmName("getAppId")
      get() = _builder.getAppId()
      @JvmName("setAppId")
      set(value) {
        _builder.setAppId(value)
      }
    /**
     * `string appId = 2;`
     */
    public fun clearAppId() {
      _builder.clearAppId()
    }
  }
}
public inline fun pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest.copy(block: pl.leancode.patrol.contracts.WaitUntilVisibleRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequest =
  pl.leancode.patrol.contracts.WaitUntilVisibleRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val pl.leancode.patrol.contracts.Contracts.WaitUntilVisibleRequestOrBuilder.selectorOrNull: pl.leancode.patrol.contracts.Contracts.Selector?
  get() = if (hasSelector()) getSelector() else null

