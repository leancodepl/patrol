// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `pl.leancode.patrol.AndroidServerPortProvider`
class AndroidServerPortProvider extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AndroidServerPortProvider> $type;

  @jni$_.internal
  AndroidServerPortProvider.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'pl/leancode/patrol/AndroidServerPortProvider');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AndroidServerPortProvider$NullableType();
  static const type = $AndroidServerPortProvider$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AndroidServerPortProvider() {
    return AndroidServerPortProvider.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setPort = _class.staticMethodId(
    r'setPort',
    r'(I)V',
  );

  static final _setPort = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public void setPort(int newValue)`
  static void setPort(
    int newValue,
  ) {
    _setPort(_class.reference.pointer, _id_setPort as jni$_.JMethodIDPtr,
            newValue)
        .check();
  }

  static final _id_getPort = _class.staticMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public int getPort()`
  static int getPort() {
    return _getPort(_class.reference.pointer, _id_getPort as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $AndroidServerPortProvider$NullableType
    extends jni$_.JObjType<AndroidServerPortProvider?> {
  @jni$_.internal
  const $AndroidServerPortProvider$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lpl/leancode/patrol/AndroidServerPortProvider;';

  @jni$_.internal
  @core$_.override
  AndroidServerPortProvider? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AndroidServerPortProvider.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AndroidServerPortProvider?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AndroidServerPortProvider$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AndroidServerPortProvider$NullableType) &&
        other is $AndroidServerPortProvider$NullableType;
  }
}

final class $AndroidServerPortProvider$Type
    extends jni$_.JObjType<AndroidServerPortProvider> {
  @jni$_.internal
  const $AndroidServerPortProvider$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lpl/leancode/patrol/AndroidServerPortProvider;';

  @jni$_.internal
  @core$_.override
  AndroidServerPortProvider fromReference(jni$_.JReference reference) =>
      AndroidServerPortProvider.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AndroidServerPortProvider?> get nullableType =>
      const $AndroidServerPortProvider$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AndroidServerPortProvider$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AndroidServerPortProvider$Type) &&
        other is $AndroidServerPortProvider$Type;
  }
}
