// ignore_for_file: invalid_use_of_internal_member, depend_on_referenced_packages

import 'package:patrol/src/native/contracts/contracts.pbgrpc.dart';
import 'package:test_api/src/backend/group.dart';
import 'package:test_api/src/backend/group_entry.dart';
import 'package:test_api/src/backend/invoker.dart';
import 'package:test_api/src/backend/test.dart';

import 'common.dart';
import 'example_test.dart' as example_test;
import 'permissions/permissions_location_test.dart'
    as permissions_location_test;
import 'permissions/permissions_many_test.dart' as permissions_many_test;
import 'sign_in/sign_in_facebook_test.dart' as sign_in_facebook_test;
import 'sign_in/sign_in_google_test.dart' as sign_in_google_test;

// This whole file will be autogenerated.

Future<void> main() async {
  // Create a one-off NativeAutomator. It's responsible for:
  // * seed the native side with the Dart test suite hierarchy
  // * send test results back to the native side in its tearDownAll callback
  final binding = PatrolBinding.ensureInitialized();
  binding.nativeAutomator = NativeAutomator(config: NativeAutomatorConfig());

  // Run a single, special test to expore the hierarchy of groups and tests
  test('patrol_test_explorer', () {
    final topLevelGroup = Invoker.current!.liveTest.groups.first;
    print('Dart test suite hierarchy:');
    _printGroupEntry(topLevelGroup);

    final dartTestGroup = _createDartTestGroup(topLevelGroup);
    print('DartTestGroup (from contracts):');
    describe(dartTestGroup);

    NativeAutomator(config: NativeAutomatorConfig())
        .setDartTests(dartTestGroup);

    expect(true, true);
  });

  group('permissions', () {
    group('permissions_location_test', permissions_location_test.main);

    group('permissions_many_test', permissions_many_test.main);
  });

  group('sign_in', () {
    group('sign_in_facebook_test', sign_in_facebook_test.main);
    group('sign_in_google_test', sign_in_google_test.main);
  });

  group('example_test', example_test.main);

  tearDownAll(() {});
}

/// Prints test entry.
///
/// If [entry] is a group, then it's recursively printed as well.
void _printGroupEntry(GroupEntry entry, {int level = 0}) {
  final padding = '  ' * level;
  if (entry is Group) {
    print('$padding Group: ${entry.name}');
    for (final groupEntry in entry.entries) {
      _printGroupEntry(groupEntry, level: level + 1);
    }
  } else if (entry is Test) {
    if (entry.name == 'patrol_test_explorer') {
      return;
    }

    print('$padding Test: ${entry.name}');
  }
}

/// Creates a DartTestGroup by recursively visiting subgroups of [topLevelGroup]
/// and tests these groups contain.
///
/// This function also removes parent group prefixes.
DartTestGroup _createDartTestGroup(Group topLevelGroup, {String prefix = ''}) {
  print('topLevelGroup.name: ${topLevelGroup.name}');
  final groupName = topLevelGroup.name.replaceFirst(prefix, '').trim();
  print('groupName: $groupName');
  final group = DartTestGroup(name: groupName);

  for (final entry in topLevelGroup.entries) {
    if (entry is Group) {
      final subgroup = _createDartTestGroup(entry, prefix: groupName);
      group.groups.add(subgroup);
    }

    if (entry is Test) {
      if (entry.name == 'patrol_test_explorer') {
        continue;
      }

      print('entry.name: ${entry.name}');
      final testName = entry.name.replaceFirst(groupName, '').trim();
      print('testName: $testName');
      final dartTest = DartTestCase(name: testName);
      group.tests.add(dartTest);
    }
  }

  return group;
}

/// Recursively prints test groups and test cases.
///
/// [entry] is either a [DartTestGroup] or DartTestCase.
void describe(DartTestGroup entry, {int level = 0}) {
  final padding = '  ' * level;
  print(
    '$padding Group: ${entry.name} (${entry.groups.length} groups, ${entry.tests.length} tests)',
  );
  print('$padding  Groups: ${entry.groups.isEmpty ? 'none' : ''}');
  for (final groupEntry in entry.groups) {
    describe(groupEntry, level: level + 1);
  }
  print('$padding  Tests: ${entry.tests.isEmpty ? 'none' : ''}');
  for (final test in entry.tests) {
    print('$padding    Test: ${test.name}');
  }
}
