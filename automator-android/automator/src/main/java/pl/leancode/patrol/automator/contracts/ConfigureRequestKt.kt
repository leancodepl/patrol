//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: contracts.proto

package pl.leancode.patrol.automator.contracts;

@kotlin.jvm.JvmName("-initializeconfigureRequest")
public inline fun configureRequest(block: pl.leancode.patrol.automator.contracts.ConfigureRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest =
  pl.leancode.patrol.automator.contracts.ConfigureRequestKt.Dsl._create(pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest.newBuilder()).apply { block() }._build()
public object ConfigureRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest = _builder.build()

    /**
     * <code>uint64 findTimeoutMillis = 1;</code>
     */
    public var findTimeoutMillis: kotlin.Long
      @JvmName("getFindTimeoutMillis")
      get() = _builder.getFindTimeoutMillis()
      @JvmName("setFindTimeoutMillis")
      set(value) {
        _builder.setFindTimeoutMillis(value)
      }
    /**
     * <code>uint64 findTimeoutMillis = 1;</code>
     */
    public fun clearFindTimeoutMillis() {
      _builder.clearFindTimeoutMillis()
    }
  }
}
public inline fun pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest.copy(block: pl.leancode.patrol.automator.contracts.ConfigureRequestKt.Dsl.() -> kotlin.Unit): pl.leancode.patrol.automator.contracts.Contracts.ConfigureRequest =
  pl.leancode.patrol.automator.contracts.ConfigureRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
