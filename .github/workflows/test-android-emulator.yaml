name: test android emulator

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:
  main:
    name: Test on Android emulator (${{ matrix.api-level }}, ${{ matrix.target}}, ${{matrix.arch}})
    runs-on: macos-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        flutter-channel: [stable]
        api-level: [28, 29, 30, 31, 33]
        target: [google_apis]
        arch: [x86_64]

    defaults:
      run:
        working-directory: packages/patrol/example

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          generate-job-summary: false

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adbkey
            ~/.android/adbkey.pub
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          ram-size: 4096M
          heap-size: 2048M
          disk-size: 8192M
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ matrix.flutter-channel }}

      - name: Preload Flutter artifacts
        run: flutter precache

      - name: Install Patrol
        run: dart pub global activate patrol_cli

      - name: Generate Gradle wrapper
        run: flutter build apk --debug --flavor=does-not-exist || true

      - name: Start emulator and run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -wipe-data
          disable-animations: false
          working-directory: ${{ github.workspace }}/packages/patrol/example
          script: |
            # FIXME: Execution of subsequent tests is aborted on failure
            adb logcat -c
            adb logcat > logcat.txt &
            patrol test -t integration_test/android_app_test.dart
            patrol test -t integration_test/example_test.dart
            patrol test -t integration_test/notifications_test.dart
            patrol test -t integration_test/open_app_test.dart
            patrol test -t integration_test/open_quick_settings_test.dart
            patrol test -t integration_test/permissions_location_test.dart
            patrol test -t integration_test/permissions_many_test.dart
            patrol test -t integration_test/service_cellular_test.dart
            patrol test -t integration_test/service_dark_mode_test.dart
            patrol test -t integration_test/service_wifi_test.dart
            patrol test -t integration_test/swipe_test.dart

      - name: Upload logcat to artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          # FIXME: Reports and results of only the last test are uploadeds
          name: Results for ${{ matrix.api-level }}-${{ matrix.target}}-${{matrix.arch}}.txt
          path: |
            ${{ github.workspace }}/packages/patrol/example/android/logcat.txt
            ${{ github.workspace }}/packages/patrol/example/android/test-results
            ${{ github.workspace }}/packages/patrol/example/android/test-reports
