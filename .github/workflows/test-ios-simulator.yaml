name: test ios simulator

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:
  run_tests:
    name: "Flutter ${{ matrix.flutter-version }} on ${{ matrix.device }}, ${{ matrix.os }} ${{ matrix.os_version }}"
    runs-on: macos-latest
    timeout-minutes: 60
    outputs:
      SLACK_MESSAGE_TITLE: iOS simulator
      TESTS_EXIT_CODE: ${{ steps.tests_step.outputs.TESTS_EXIT_CODE }}

    strategy:
      fail-fast: false
      matrix:
        flutter-version: ['3.7.x']
        device: [iPhone 14, iPad (9th generation)]
        os: [iOS]
        os_version: ['16.2']

    defaults:
      run:
        working-directory: packages/patrol/example

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          cache: true

      - name: Preload Flutter artifacts
        run: flutter precache

      - name: Set up Patrol CLI
        working-directory: packages/patrol_cli
        run: dart pub global activate --source path . && patrol

      - name: Start iOS simulator
        id: start_simulator
        uses: futureware-tech/simulator-action@v2
        with:
          model: ${{ matrix.device }}
          os: ${{ matrix.os }}
          os_version: ${{ matrix.os_version }}
          erase_before_boot: true
          shutdown_after_job: true

      - name: Set simulator location
        run: xcrun simctl location booted set 52.17469,21.03193

      - name: Run tests
        id: tests_step
        run: |
          xcrun simctl io booted recordVideo --codec=h264 "${{ matrix.device }}.mp4" &
          recordingpid="$!"
          
          xcrun simctl spawn booted log stream --type log --color none > all_simulator_logs.txt &
          logpid="$!"
          
          TESTS_EXIT_CODE=0
          patrol test \
            --exclude integration_test/android_app_test.dart \
            --exclude integration_test/service_airplane_mode_test.dart \
            --exclude integration_test/service_bluetooth_test.dart \
            --exclude integration_test/service_cellular_test.dart \
            --exclude integration_test/service_wifi_test.dart \
            --exclude integration_test/swipe_test.dart \
            --exclude integration_test/webview_leancode_test.dart \
            --exclude integration_test/webview_login_test.dart \
            --exclude integration_test/webview_stackoverflow_test.dart || TESTS_EXIT_CODE=$?

          kill -SIGINT $recordingpid
          kill -SIGINT $logpid
          echo "TESTS_EXIT_CODE=$TESTS_EXIT_CODE" >> "$GITHUB_OUTPUT"
          exit $TESTS_EXIT_CODE

      - name: Find xcresult path
        if: success() || failure()
        run: echo "XCRESULT_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" -type d)" >> $GITHUB_ENV
      
      - name: Publish test report to summary
        if: success() || failure()
        uses: kishikawakatsumi/xcresulttool@v1
        with:
          title: Patrol tests on ${{ matrix.device }}
          upload-bundles: never
          path: |
            ${{ env.XCRESULT_PATH }}
     
      - name: Upload XCRESULT test result to artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Test result from ${{ matrix.device }}.xcresult
          path: ${{ env.XCRESULT_PATH }}
      
      - name: Upload simulator logs to artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Logs from ${{ matrix.device }}
          path: |
            ${{ github.workspace }}/packages/patrol/example/all_simulator_logs.txt

      - name: Upload captured video to artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Captured video from ${{ matrix.device }}.mp4
          path: ${{ github.workspace }}/packages/patrol/example/${{ matrix.device }}.mp4

  call_send_slack_message:
    name: Notify on Slack
    uses: ./.github/workflows/send-slack-message.yaml
    needs: run_tests
    if: always()
    with:
      TESTS_EXIT_CODE: ${{ needs.run_tests.outputs.TESTS_EXIT_CODE }}
      SLACK_MESSAGE_TITLE: ${{ needs.run_tests.outputs.SLACK_MESSAGE_TITLE }}
    secrets: inherit
