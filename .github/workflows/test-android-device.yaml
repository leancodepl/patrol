name: test android device

on:
  workflow_dispatch:
  schedule:
    - cron: '30 21 * * *'

jobs:
  run_tests:
    name: Flutter ${{ matrix.flutter-version }} on Firebase Test Lab
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      failure_status: ${{ steps.set_failure.outputs.failure_status }}
      error_status: ${{ steps.set_error.outputs.error_status }}

    strategy:
      fail-fast: false
      matrix:
        flutter-version: ['3.7.x']

    defaults:
      run:
        working-directory: packages/patrol/example

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_JSON }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          generate-job-summary: false

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          cache: true

      - name: Preload Flutter artifacts
        run: flutter precache

      - name: Set up Patrol CLI
        working-directory: packages/patrol_cli
        run: dart pub global activate --source path . && patrol

      - name: Generate Gradle wrapper
        run: flutter build apk --debug --flavor=does-not-exist || true

      - name: patrol build android
        run: |
          patrol build android \
            --exclude integration_test/permissions_location_test.dart \
            --exclude integration_test/service_airplane_mode_test.dart \
            --exclude integration_test/service_bluetooth_test.dart \
            --exclude integration_test/webview_hackernews_test.dart \
            --exclude integration_test/webview_leancode_test.dart \
            --exclude integration_test/webview_login_test.dart \
            --exclude integration_test/webview_stackoverflow_test.dart

      - name: Upload APKs to Firebase Test Lab and wait for tests to finish
        id: tests_step
        run: ./run_android_testlab

      # RESULTS_DIR_NAME is created by run_android_testlab script
      - name: Get test outputs from Google Cloud Storage
        if: success() || failure()
        run: |
          mkdir "test_outputs"
          gsutil -m cp -r "gs://patrol_runs/${{ env.RESULTS_DIR_NAME }}/oriole-33-en-portrait/*" "test_outputs"

      - name: Publish test report to summary
        uses: mikepenz/action-junit-report@v3
        if: success() || failure()
        with:
          check_name: Patrol tests
          report_paths: ${{ github.workspace }}/packages/patrol/example/test_outputs/test_result_1.xml
          detailed_summary: true
          include_passed: true

      - name: Generate test report as check run
        if: success() || failure()
        uses: dorny/test-reporter@v1
        with:
          name: Patrol Tests
          path: ${{ github.workspace }}/packages/patrol/example/test_outputs/test_result_1.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload XML test report to artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: XML test report
          path: ${{ github.workspace }}/packages/patrol/example/test_outputs/test_result_1.xml

      - name: Upload captured video to artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: Captured video
          path: ${{ github.workspace }}/packages/patrol/example/test_outputs/video.mp4

      - name: Upload test cases to artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: Test cases (logcat and captured video per test target)
          path: ${{ github.workspace }}/packages/patrol/example/test_outputs/test_cases

      - name: Upload device logs to artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Logs (logcat)
          path: ${{ github.workspace }}/packages/patrol/example/test_outputs/logcat

      - name: Check if failed test occured
        id: set_failure
        if: always()
        run: >
          if [ "${{ steps.tests_step.conclusion }}" == "failure" ]; then
            echo "failure_status=failure" >> "$GITHUB_OUTPUT";
          fi;

      - name: Check if error during run occurred
        id: set_error
        if: always()
        run: >
          if [ "${{ steps.tests_step.conclusion }}" == "skipped" ] || [ "${{ steps.tests_step.conclusion }}" == "cancelled" ]; then
            echo "error_status=error" >> "$GITHUB_OUTPUT";
          fi;

  slack_notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: run_tests
    if: ${{ always() }}

    steps:
      - name: Set Slack message
        id: slack_message
        env:
          failure_status: ${{ needs.run_tests.outputs.failure_status }}
          error_status: ${{ needs.run_tests.outputs.error_status }}
        run: >
          if [ ! -z "$failure_status" ]; then
            message="There were failing tests 💥 ";
            status="failure";
          elif [ ! -z "$error_status" ]; then
            message="Something went wrong ⚠️";
            status="failure";
          else
            message="All tests have passed on ✅ ";
            status="success";
          fi;

          url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}";
          echo "message=$message" >> $GITHUB_OUTPUT;
          echo "url=$url" >> $GITHUB_OUTPUT;
          echo "status=$status" >> $GITHUB_OUTPUT;

      - name: Share test results on Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ vars.SLACK_STATUS_CHANNEL }}
          SLACK_USERNAME: Patrol CI on GitHub Actions
          SLACK_COLOR: ${{ steps.slack_message.outputs.status }}
          SLACK_ICON: ${{ vars.SLACK_ICON }}
          SLACK_TITLE: Test status (Android device on Firebase Test Lab)
          SLACK_MESSAGE: |
            ${{ steps.slack_message.outputs.message }}

            See workflow run <${{ steps.slack_message.outputs.url }}|here>
